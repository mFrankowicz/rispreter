{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52],"program":"/home/mfrankowicz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","linefeed","/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=42175ebfb454b736","-C","extra-filename=-42175ebfb454b736","--out-dir","/home/mfrankowicz/dev/rust/rispreter/target/rls/debug/deps","-L","dependency=/home/mfrankowicz/dev/rust/rispreter/target/rls/debug/deps","--extern","dirs=/home/mfrankowicz/dev/rust/rispreter/target/rls/debug/deps/libdirs-3d426be3f6c9465b.rmeta","--extern","mortal=/home/mfrankowicz/dev/rust/rispreter/target/rls/debug/deps/libmortal-079f2291f28d0877.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/mfrankowicz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,100,101,118,47,114,117,115,116,47,114,105,115,112,114,101,116,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,108,105,110,101,102,101,101,100,45,52,50,49,55,53,101,98,102,98,52,53,52,98,55,51,54,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"linefeed","disambiguator":[11025506832802680086,6941815176560615021]},"crate_root":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src","external_crates":[{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16815140564177528544,7667267874726994872]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[187314981474274778,1083661791214681110]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4824384386947771827,11106948233408082830]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[16908032241945569920,8266732003853611156]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[9137853751279309459,8092724810859519352]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[11132156669666639483,11040062018324322438]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5602102949500140880,16916072136176131268]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[10801912057376177381,17504779663444165214]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[15724855950109001065,10349828210234953783]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":10,"id":{"name":"dirs","disambiguator":[15262053860809969321,12904283963221360677]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":11,"id":{"name":"libc","disambiguator":[16776762567319910210,5103608555942435349]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":12,"id":{"name":"mortal","disambiguator":[10902695559240662196,9049918481741052590]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":13,"id":{"name":"bitflags","disambiguator":[17113675455724437977,10496022638452735244]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":14,"id":{"name":"smallstr","disambiguator":[1849792755757500751,8942583728869927095]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":15,"id":{"name":"smallvec","disambiguator":[8059276271467087142,15917724627666025641]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":16,"id":{"name":"unreachable","disambiguator":[1017427395299777709,13292417744839773689]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":17,"id":{"name":"void","disambiguator":[17341670227939535206,14360588959851109348]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":18,"id":{"name":"unicode_normalization","disambiguator":[4224351941247538807,11602209458807261158]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":19,"id":{"name":"unicode_width","disambiguator":[5525200175511770022,10613191734340873178]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":20,"id":{"name":"nix","disambiguator":[12178706252879965421,16888496123412122878]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":21,"id":{"name":"bitflags","disambiguator":[12216314699657674433,14336353076395461801]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":22,"id":{"name":"cfg_if","disambiguator":[4691068791353088741,12918589564002846098]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":23,"id":{"name":"terminfo","disambiguator":[8337621323392744468,1633777624884433202]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":24,"id":{"name":"nom","disambiguator":[15783751394520636355,17489703296155599234]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":25,"id":{"name":"memchr","disambiguator":[2745809117222202032,2636864380988684425]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":26,"id":{"name":"phf","disambiguator":[18256426481702491165,12144111577995758386]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":27,"id":{"name":"phf_shared","disambiguator":[6469880359455224487,17397414024556237854]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":28,"id":{"name":"siphasher","disambiguator":[18302561815013091669,3506499881840355183]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","num":29,"id":{"name":"fnv","disambiguator":[13644517753425190247,4260486655231853004]}}],"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":1872,"line_start":1,"line_end":86,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2012},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":904,"byte_end":911,"line_start":39,"line_end":39,"column_start":18,"column_end":25},"alias_span":null,"name":"Command","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":932,"byte_end":941,"line_start":40,"line_end":40,"column_start":20,"column_end":29},"alias_span":null,"name":"Completer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2052},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":943,"byte_end":953,"line_start":40,"line_end":40,"column_start":31,"column_end":41},"alias_span":null,"name":"Completion","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2062},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":955,"byte_end":961,"line_start":40,"line_end":40,"column_start":43,"column_end":49},"alias_span":null,"name":"Suffix","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":982,"byte_end":990,"line_start":41,"line_end":41,"column_start":19,"column_end":27},"alias_span":null,"name":"Function","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":352},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1011,"byte_end":1020,"line_start":42,"line_end":42,"column_start":20,"column_end":29},"alias_span":null,"name":"Interface","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1040,"byte_end":1048,"line_start":43,"line_end":43,"column_start":19,"column_end":27},"alias_span":null,"name":"Prompter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1036},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1067,"byte_end":1073,"line_start":44,"line_end":44,"column_start":18,"column_end":24},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2116},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1075,"byte_end":1085,"line_start":44,"line_end":44,"column_start":26,"column_end":36},"alias_span":null,"name":"ReadResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1342},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1107,"byte_end":1122,"line_start":45,"line_end":45,"column_start":20,"column_end":35},"alias_span":null,"name":"DefaultTerminal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":12,"index":1542},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1124,"byte_end":1130,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"alias_span":null,"name":"Signal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1346},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1132,"byte_end":1140,"line_start":45,"line_end":45,"column_start":45,"column_end":53},"alias_span":null,"name":"Terminal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1706},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1159,"byte_end":1165,"line_start":46,"line_end":46,"column_start":17,"column_end":23},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":12,"index":1868},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171336,"byte_end":171346,"line_start":9,"line_end":9,"column_start":18,"column_end":28},"alias_span":null,"name":"CursorMode","value":"","parent":{"krate":0,"index":1312}},{"kind":"Use","ref_id":{"krate":12,"index":1542},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171348,"byte_end":171354,"line_start":9,"line_end":9,"column_start":30,"column_end":36},"alias_span":null,"name":"Signal","value":"","parent":{"krate":0,"index":1312}},{"kind":"Use","ref_id":{"krate":12,"index":1562},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171356,"byte_end":171365,"line_start":9,"line_end":9,"column_start":38,"column_end":47},"alias_span":null,"name":"SignalSet","value":"","parent":{"krate":0,"index":1312}},{"kind":"Use","ref_id":{"krate":12,"index":2188},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171367,"byte_end":171371,"line_start":9,"line_end":9,"column_start":49,"column_end":53},"alias_span":null,"name":"Size","value":"","parent":{"krate":0,"index":1312}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":1872,"line_start":1,"line_end":86,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":32},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":76},{"krate":0,"index":98},{"krate":0,"index":188},{"krate":0,"index":208},{"krate":0,"index":282},{"krate":0,"index":448},{"krate":0,"index":646},{"krate":0,"index":922},{"krate":0,"index":1278},{"krate":0,"index":1312},{"krate":0,"index":1450},{"krate":0,"index":1548},{"krate":0,"index":1602},{"krate":0,"index":1962}],"decl_id":null,"docs":" Provides a configurable, concurrent, extensible, interactive input reader\n for Unix terminals and Windows console.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":728,"byte_end":750,"line_start":30,"line_end":30,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chars","qualname":"::chars","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/chars.rs","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74}],"decl_id":null,"docs":" Provides utilities for manipulating character values\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":2163,"byte_end":2166,"line_start":7,"line_end":7,"column_start":11,"column_end":14},"name":"EOF","qualname":"::chars::EOF","value":"char","parent":null,"children":[],"decl_id":null,"docs":" Character value indicating end-of-file\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":2242,"byte_end":2248,"line_start":10,"line_end":10,"column_start":11,"column_end":17},"name":"ESCAPE","qualname":"::chars::ESCAPE","value":"char","parent":null,"children":[],"decl_id":null,"docs":" Character value generated by the Escape key\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":2396,"byte_end":2402,"line_start":16,"line_end":16,"column_start":11,"column_end":17},"name":"DELETE","qualname":"::chars::DELETE","value":"char","parent":null,"children":[],"decl_id":null,"docs":" Character value generated by the Backspace key","sig":null,"attributes":[{"value":"cfg(unix)","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":2373,"byte_end":2385,"line_start":15,"line_end":15,"column_start":1,"column_end":13}}]},{"kind":"Const","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":2651,"byte_end":2657,"line_start":25,"line_end":25,"column_start":11,"column_end":17},"name":"RUBOUT","qualname":"::chars::RUBOUT","value":"char","parent":null,"children":[],"decl_id":null,"docs":" Character value generated by the Backspace key on some systems\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":2807,"byte_end":2822,"line_start":30,"line_end":30,"column_start":8,"column_end":23},"name":"parse_char_name","qualname":"::chars::parse_char_name","value":"fn (name: &str) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns a character name as a key sequence, e.g. `Control-x` or `Meta-x`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":3874,"byte_end":3889,"line_start":66,"line_end":66,"column_start":8,"column_end":23},"name":"escape_sequence","qualname":"::chars::escape_sequence","value":"fn (s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a character sequence escaped for user-facing display.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":4469,"byte_end":4473,"line_start":88,"line_end":88,"column_start":8,"column_end":12},"name":"meta","qualname":"::chars::meta","value":"fn (ch: char) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a meta sequence for the given character.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":4823,"byte_end":4835,"line_start":102,"line_end":102,"column_start":8,"column_end":20},"name":"is_printable","qualname":"::chars::is_printable","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the character is printable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":5042,"byte_end":5049,"line_start":110,"line_end":110,"column_start":8,"column_end":15},"name":"is_ctrl","qualname":"::chars::is_ctrl","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the given character is a control character.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":5207,"byte_end":5211,"line_start":117,"line_end":117,"column_start":8,"column_end":12},"name":"ctrl","qualname":"::chars::ctrl","value":"fn (c: char) -> char","parent":null,"children":[],"decl_id":null,"docs":" Returns a control character for the given character.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":5359,"byte_end":5365,"line_start":122,"line_end":122,"column_start":8,"column_end":14},"name":"unctrl","qualname":"::chars::unctrl","value":"fn (c: char) -> char","parent":null,"children":[],"decl_id":null,"docs":" Returns the printable character corresponding to the given control character.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,104,97,114,115,46,114,115],"byte_start":5512,"byte_end":5524,"line_start":127,"line_end":127,"column_start":8,"column_end":20},"name":"unctrl_lower","qualname":"::chars::unctrl_lower","value":"fn (c: char) -> char","parent":null,"children":[],"decl_id":null,"docs":" Returns the lowercase character corresponding to the given control character.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"command","qualname":"::command","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/command.rs","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":2012},{"krate":0,"index":2028},{"krate":0,"index":2024},{"krate":0,"index":2020},{"krate":0,"index":2014},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2004},{"krate":0,"index":2032},{"krate":0,"index":2050},{"krate":0,"index":2046},{"krate":0,"index":2042},{"krate":0,"index":2038},{"krate":0,"index":2034},{"krate":0,"index":92}],"decl_id":null,"docs":" Defines the set of line editing commands\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":763},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12490,"byte_end":12498,"line_start":156,"line_end":156,"column_start":5,"column_end":13},"name":"Complete","qualname":"::command::Category::Complete","value":"Category::Complete","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" Completion command\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":765},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12525,"byte_end":12529,"line_start":158,"line_end":158,"column_start":5,"column_end":9},"name":"Kill","qualname":"::command::Category::Kill","value":"Category::Kill","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" Kill command\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":767},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12574,"byte_end":12580,"line_start":160,"line_end":160,"column_start":5,"column_end":11},"name":"Search","qualname":"::command::Category::Search","value":"Category::Search","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" Non-incremental search command\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":769},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12621,"byte_end":12638,"line_start":162,"line_end":162,"column_start":5,"column_end":22},"name":"IncrementalSearch","qualname":"::command::Category::IncrementalSearch","value":"Category::IncrementalSearch","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" Incremental search command\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":771},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12665,"byte_end":12669,"line_start":164,"line_end":164,"column_start":5,"column_end":9},"name":"Yank","qualname":"::command::Category::Yank","value":"Category::Yank","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" Yank command\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":773},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12706,"byte_end":12711,"line_start":166,"line_end":166,"column_start":5,"column_end":10},"name":"Digit","qualname":"::command::Category::Digit","value":"Category::Digit","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" Digit argument command\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":775},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12739,"byte_end":12744,"line_start":168,"line_end":168,"column_start":5,"column_end":10},"name":"Other","qualname":"::command::Category::Other","value":"Category::Other","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" Other command\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2032},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12448,"byte_end":12456,"line_start":154,"line_end":154,"column_start":10,"column_end":18},"name":"Category","qualname":"::command::Category","value":"Category::{Complete, Kill, Search, IncrementalSearch, Yank, Digit, Other}","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":775}],"decl_id":null,"docs":" Describes the category of a command","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12439,"byte_end":12747,"line_start":154,"line_end":169,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12439,"byte_end":12747,"line_start":154,"line_end":169,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12819,"byte_end":12827,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"category","qualname":"<Command>::category","value":"fn (&self) -> Category","parent":null,"children":[],"decl_id":null,"docs":" Returns the category of the command\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::complete","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/complete.rs","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":2052},{"krate":0,"index":2058},{"krate":0,"index":2054},{"krate":0,"index":2062},{"krate":0,"index":2082},{"krate":0,"index":2078},{"krate":0,"index":2074},{"krate":0,"index":2070},{"krate":0,"index":2064},{"krate":0,"index":120},{"krate":0,"index":132},{"krate":0,"index":142},{"krate":0,"index":146},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"decl_id":null,"docs":" Provides utilities for implementing word completion\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2052},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":13777,"byte_end":13787,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"Completion","qualname":"::complete::Completion","value":"Completion { completion, display, suffix }","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":781}],"decl_id":null,"docs":" Represents a single possible completion\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":777},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":13828,"byte_end":13838,"line_start":14,"line_end":14,"column_start":9,"column_end":19},"name":"completion","qualname":"::complete::Completion::completion","value":"std::string::String","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":" Whole completion text\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":779},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":13917,"byte_end":13924,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"name":"display","qualname":"::complete::Completion::display","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":" Listing display string; `None` if matches completion\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":781},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14003,"byte_end":14009,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"name":"suffix","qualname":"::complete::Completion::suffix","value":"complete::Suffix","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":" Completion suffix; replaces append character\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":783},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14183,"byte_end":14190,"line_start":25,"line_end":25,"column_start":5,"column_end":12},"name":"Default","qualname":"::complete::Suffix::Default","value":"Suffix::Default","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Use the default suffix\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":785},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14218,"byte_end":14222,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"None","qualname":"::complete::Suffix::None","value":"Suffix::None","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Use no suffix\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":787},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14257,"byte_end":14261,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Some","qualname":"::complete::Suffix::Some","value":"Suffix::Some(char)","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Use the given suffix\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2062},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14139,"byte_end":14145,"line_start":23,"line_end":23,"column_start":10,"column_end":16},"name":"Suffix","qualname":"::complete::Suffix","value":"Suffix::{Default, None, Some}","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":787}],"decl_id":null,"docs":" Specifies an optional suffix to override the default value\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14130,"byte_end":14270,"line_start":23,"line_end":30,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14130,"byte_end":14270,"line_start":23,"line_end":30,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14435,"byte_end":14441,"line_start":35,"line_end":35,"column_start":12,"column_end":18},"name":"simple","qualname":"<Completion>::simple","value":"fn (s: String) -> Completion","parent":null,"children":[],"decl_id":null,"docs":" Returns a simple `Completion` value, with display string matching\n completion and using the default completion suffix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14754,"byte_end":14764,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"completion","qualname":"<Completion>::completion","value":"fn (&self, def_suffix: Option<char>) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the full completion string, including suffix, using the given\n default suffix if one is not assigned to this completion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":15063,"byte_end":15070,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"display","qualname":"<Completion>::display","value":"fn (&self) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the display string, including suffix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":15322,"byte_end":15335,"line_start":67,"line_end":67,"column_start":12,"column_end":25},"name":"display_chars","qualname":"<Completion>::display_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of characters displayed\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":15716,"byte_end":15726,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"is_default","qualname":"<Suffix>::is_default","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the `Suffix` value is the `Default` variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":15923,"byte_end":15930,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"is_some","qualname":"<Suffix>::is_some","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the `Suffix` value is the `Some(_)` variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":16124,"byte_end":16131,"line_start":98,"line_end":98,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Suffix>::is_none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the `Suffix` value is the `None` variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":16336,"byte_end":16348,"line_start":106,"line_end":106,"column_start":12,"column_end":24},"name":"with_default","qualname":"<Suffix>::with_default","value":"fn (self, default: Option<char>) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `Option<char>`, using the given value in place of `Default`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":16728,"byte_end":16737,"line_start":122,"line_end":122,"column_start":11,"column_end":20},"name":"Completer","qualname":"::complete::Completer","value":"Completer<Term: Terminal>: Send + Sync","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"decl_id":null,"docs":" Performs completion for `Prompter` when triggered by a user input sequence\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":16847,"byte_end":16855,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"complete","qualname":"::complete::Completer::complete","value":"fn (&self, word: &str, prompter: &Prompter<Term>, start: usize, end: usize) -> Option<Vec<Completion>>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the set of possible completions for the prefix `word`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":17158,"byte_end":17168,"line_start":131,"line_end":131,"column_start":8,"column_end":18},"name":"word_start","qualname":"::complete::Completer::word_start","value":"fn (&self, line: &str, end: usize, prompter: &Prompter<Term>) -> usize","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the starting position of the word under the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":17451,"byte_end":17456,"line_start":138,"line_end":138,"column_start":8,"column_end":13},"name":"quote","qualname":"::complete::Completer::quote","value":"fn <'a> (&self, word: &'a str) -> Cow<'a, str>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Quotes a possible completion for insertion into input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":17667,"byte_end":17674,"line_start":143,"line_end":143,"column_start":8,"column_end":15},"name":"unquote","qualname":"::complete::Completer::unquote","value":"fn <'a> (&self, word: &'a str) -> Cow<'a, str>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Unquotes a piece of user input before searching for completions.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":17870,"byte_end":17884,"line_start":149,"line_end":149,"column_start":12,"column_end":26},"name":"DummyCompleter","qualname":"::complete::DummyCompleter","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Completer` type that performs no completion","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":18174,"byte_end":18187,"line_start":157,"line_end":157,"column_start":12,"column_end":25},"name":"PathCompleter","qualname":"::complete::PathCompleter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Performs completion by searching for filenames matching the word prefix.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":18807,"byte_end":18820,"line_start":179,"line_end":179,"column_start":8,"column_end":21},"name":"complete_path","qualname":"::complete::complete_path","value":"fn (path: &str) -> Vec<Completion>","parent":null,"children":[],"decl_id":null,"docs":" Returns a sorted list of paths whose prefix matches the given path.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":20368,"byte_end":20384,"line_start":225,"line_end":225,"column_start":8,"column_end":24},"name":"word_break_start","qualname":"::complete::word_break_start","value":"fn (s: &str, word_break: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the start position of the word that ends at the end of the string.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":20712,"byte_end":20730,"line_start":240,"line_end":240,"column_start":8,"column_end":26},"name":"escaped_word_start","qualname":"::complete::escaped_word_start","value":"fn (s: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the start position of a word with non-word characters escaped by\n backslash (`\\\\`).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":21629,"byte_end":21635,"line_start":280,"line_end":280,"column_start":8,"column_end":14},"name":"escape","qualname":"::complete::escape","value":"fn (s: &str) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":" Escapes a word by prefixing a backslash (`\\\\`) to non-word characters.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":22091,"byte_end":22099,"line_start":300,"line_end":300,"column_start":8,"column_end":16},"name":"unescape","qualname":"::complete::unescape","value":"fn (s: &str) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":" Unescapes a word by removing the backslash (`\\\\`) from escaped characters.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"function","qualname":"::function","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/function.rs","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":204}],"decl_id":null,"docs":" Provides the `Function` trait for implementing custom `Prompter` commands\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":23094,"byte_end":23102,"line_start":10,"line_end":10,"column_start":11,"column_end":19},"name":"Function","qualname":"::function::Function","value":"Function<Term: Terminal>: Send + Sync","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":202}],"decl_id":null,"docs":" Implements custom functionality for a `Prompter` command\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":23584,"byte_end":23591,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"execute","qualname":"::function::Function::execute","value":"fn (&self, prompter: &mut Prompter<Term>, count: i32, ch: char) -> io::Result<()>","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Executes the function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":23717,"byte_end":23725,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"category","qualname":"::function::Function::category","value":"fn (&self) -> Category","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the command category.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inputrc","qualname":"::inputrc","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/inputrc.rs","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":230},{"krate":0,"index":238},{"krate":0,"index":2084},{"krate":0,"index":2090},{"krate":0,"index":2086},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":270},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280}],"decl_id":null,"docs":" Parses configuration files in the format of GNU Readline `inputrc`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":791},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":24461,"byte_end":24465,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"Bind","qualname":"::inputrc::Directive::Bind","value":"Directive::Bind(String, Command)","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Bind construct; `\"input-sequence\": command-or-macro`\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":797},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":24623,"byte_end":24634,"line_start":20,"line_end":20,"column_start":5,"column_end":16},"name":"Conditional","qualname":"::inputrc::Directive::Conditional","value":"Directive::Conditional { name, value, then_group, else_group }","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Conditional construct;\n (`$if name=value` or `$if value`) *directives*\n (optional `$else` *directives*) `$endif`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":25039,"byte_end":25050,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"name":"SetVariable","qualname":"::inputrc::Directive::SetVariable","value":"Directive::SetVariable(String, String)","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" Set variable; `set name value`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2084},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":24384,"byte_end":24393,"line_start":14,"line_end":14,"column_start":10,"column_end":19},"name":"Directive","qualname":"::inputrc::Directive","value":"Directive::{Bind, Conditional, SetVariable}","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":797},{"krate":0,"index":807}],"decl_id":null,"docs":" Parsed configuration directive\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":25316,"byte_end":25326,"line_start":39,"line_end":39,"column_start":8,"column_end":18},"name":"parse_file","qualname":"::inputrc::parse_file","value":"fn <P> (filename: &P) -> Option<Vec<Directive>>","parent":null,"children":[],"decl_id":null,"docs":" Parses the named file and returns contained directives.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":26025,"byte_end":26035,"line_start":64,"line_end":64,"column_start":8,"column_end":18},"name":"parse_text","qualname":"::inputrc::parse_text","value":"fn <P> (name: &P, line: &str) -> Vec<Directive>","parent":null,"children":[],"decl_id":null,"docs":" Parses some text and returns contained directives.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interface","qualname":"::interface","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/interface.rs","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":334},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":358},{"krate":0,"index":374},{"krate":0,"index":412},{"krate":0,"index":428}],"decl_id":null,"docs":" Provides the main interface to interactive input reader\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":352},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":42612,"byte_end":42621,"line_start":45,"line_end":45,"column_start":12,"column_end":21},"name":"Interface","qualname":"::interface::Interface","value":"Interface {  }","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105}],"decl_id":null,"docs":" The main interface to input reading and other terminal operations","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":43068,"byte_end":43071,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<Interface<DefaultTerminal>>::new","value":"fn <T> (application: T) -> io::Result<Interface<DefaultTerminal>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Interface` with the given application name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":43503,"byte_end":43512,"line_start":70,"line_end":70,"column_start":12,"column_end":21},"name":"with_term","qualname":"<Interface<Term>>::with_term","value":"fn <T> (application: T, term: Term) -> io::Result<Interface<Term>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Interface` instance with a particular terminal implementation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":44073,"byte_end":44084,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"lock_reader","qualname":"<Interface<Term>>::lock_reader","value":"fn (&self) -> Reader<Term>","parent":null,"children":[],"decl_id":null,"docs":" Acquires the read lock and returns a `Reader` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":44664,"byte_end":44682,"line_start":100,"line_end":100,"column_start":12,"column_end":30},"name":"lock_writer_append","qualname":"<Interface<Term>>::lock_writer_append","value":"fn (&self) -> io::Result<Writer<Term>>","parent":null,"children":[],"decl_id":null,"docs":" Acquires the write lock and returns a `Writer` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":45243,"byte_end":45260,"line_start":113,"line_end":113,"column_start":12,"column_end":29},"name":"lock_writer_erase","qualname":"<Interface<Term>>::lock_writer_erase","value":"fn (&self) -> io::Result<Writer<Term>>","parent":null,"children":[],"decl_id":null,"docs":" Acquires the write lock and returns a `Writer` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":46980,"byte_end":46989,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"read_line","qualname":"<Interface<Term>>::read_line","value":"fn (&self) -> io::Result<ReadResult>","parent":null,"children":[],"decl_id":null,"docs":" Interactively reads a line from the terminal device.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":47837,"byte_end":47851,"line_start":179,"line_end":179,"column_start":12,"column_end":26},"name":"read_line_step","qualname":"<Interface<Term>>::read_line_step","value":"fn (&self, timeout: Option<Duration>) -> io::Result<Option<ReadResult>>","parent":null,"children":[],"decl_id":null,"docs":" Performs one step of the interactive `read_line` loop.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":48523,"byte_end":48539,"line_start":196,"line_end":196,"column_start":12,"column_end":28},"name":"cancel_read_line","qualname":"<Interface<Term>>::cancel_read_line","value":"fn (&self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Cancels an in-progress `read_line` operation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":48690,"byte_end":48699,"line_start":201,"line_end":201,"column_start":12,"column_end":21},"name":"completer","qualname":"<Interface<Term>>::completer","value":"fn (&self) -> Arc<Completer<Term>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the current completer instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":48871,"byte_end":48884,"line_start":206,"line_end":206,"column_start":12,"column_end":25},"name":"set_completer","qualname":"<Interface<Term>>::set_completer","value":"fn (&self, completer: Arc<Completer<Term>>) -> Arc<Completer<Term>>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the current completer, returning the previous instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":49127,"byte_end":49139,"line_start":213,"line_end":213,"column_start":12,"column_end":24},"name":"get_variable","qualname":"<Interface<Term>>::get_variable","value":"fn (&self, name: &str) -> Option<Variable>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the named variable or `None`\n if no such variable exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":49467,"byte_end":49479,"line_start":222,"line_end":222,"column_start":12,"column_end":24},"name":"set_variable","qualname":"<Interface<Term>>::set_variable","value":"fn (&self, name: &str, value: &str) -> Option<Variable>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the named variable and returns the previous\n value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":49660,"byte_end":49673,"line_start":227,"line_end":227,"column_start":12,"column_end":25},"name":"ignore_signal","qualname":"<Interface<Term>>::ignore_signal","value":"fn (&self, signal: Signal) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the given `Signal` is ignored.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":49831,"byte_end":49848,"line_start":232,"line_end":232,"column_start":12,"column_end":29},"name":"set_ignore_signal","qualname":"<Interface<Term>>::set_ignore_signal","value":"fn (&self, signal: Signal, set: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether the given `Signal` will be ignored.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":50017,"byte_end":50030,"line_start":237,"line_end":237,"column_start":12,"column_end":25},"name":"report_signal","qualname":"<Interface<Term>>::report_signal","value":"fn (&self, signal: Signal) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the given `Signal` is reported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":50184,"byte_end":50201,"line_start":242,"line_end":242,"column_start":12,"column_end":29},"name":"set_report_signal","qualname":"<Interface<Term>>::set_report_signal","value":"fn (&self, signal: Signal, set: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether the given `Signal` is reported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":50407,"byte_end":50420,"line_start":249,"line_end":249,"column_start":12,"column_end":25},"name":"bind_sequence","qualname":"<Interface<Term>>::bind_sequence","value":"fn <T> (&self, seq: T, cmd: Command) -> Option<Command>","parent":null,"children":[],"decl_id":null,"docs":" Binds a sequence to a command.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":50765,"byte_end":50789,"line_start":258,"line_end":258,"column_start":12,"column_end":36},"name":"bind_sequence_if_unbound","qualname":"<Interface<Term>>::bind_sequence_if_unbound","value":"fn <T> (&self, seq: T, cmd: Command) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Binds a sequence to a command, if and only if the given sequence\n is not already bound to a command.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":51061,"byte_end":51076,"line_start":266,"line_end":266,"column_start":12,"column_end":27},"name":"unbind_sequence","qualname":"<Interface<Term>>::unbind_sequence","value":"fn (&self, seq: &str) -> Option<Command>","parent":null,"children":[],"decl_id":null,"docs":" Removes a binding for the given sequence.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":51511,"byte_end":51526,"line_start":277,"line_end":277,"column_start":12,"column_end":27},"name":"define_function","qualname":"<Interface<Term>>::define_function","value":"fn <T> (&self, name: T, cmd: Arc<Function<Term>>) -> Option<Arc<Function<Term>>>","parent":null,"children":[],"decl_id":null,"docs":" Defines a named function to which sequences may be bound.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":51824,"byte_end":51839,"line_start":285,"line_end":285,"column_start":12,"column_end":27},"name":"remove_function","qualname":"<Interface<Term>>::remove_function","value":"fn (&self, name: &str) -> Option<Arc<Function<Term>>>","parent":null,"children":[],"decl_id":null,"docs":" Removes a function defined with the given name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":52015,"byte_end":52034,"line_start":290,"line_end":290,"column_start":12,"column_end":31},"name":"evaluate_directives","qualname":"<Interface<Term>>::evaluate_directives","value":"fn (&self, dirs: Vec<Directive>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Evaluates a series of configuration directives.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":52201,"byte_end":52219,"line_start":295,"line_end":295,"column_start":12,"column_end":30},"name":"evaluate_directive","qualname":"<Interface<Term>>::evaluate_directive","value":"fn (&self, dir: Directive) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Evaluates a single configuration directive.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":52632,"byte_end":52638,"line_start":309,"line_end":309,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Interface<Term>>::buffer","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the current input buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":52775,"byte_end":52786,"line_start":314,"line_end":314,"column_start":12,"column_end":23},"name":"history_len","qualname":"<Interface<Term>>::history_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current number of history entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":53091,"byte_end":53103,"line_start":324,"line_end":324,"column_start":12,"column_end":24},"name":"history_size","qualname":"<Interface<Term>>::history_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of history entries.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":53233,"byte_end":53245,"line_start":329,"line_end":329,"column_start":12,"column_end":24},"name":"save_history","qualname":"<Interface<Term>>::save_history","value":"fn <P> (&self, path: P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Save history entries to the specified file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":53618,"byte_end":53630,"line_start":342,"line_end":342,"column_start":12,"column_end":24},"name":"load_history","qualname":"<Interface<Term>>::load_history","value":"fn <P> (&self, path: P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Load history entries from the specified file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":54845,"byte_end":54854,"line_start":375,"line_end":375,"column_start":12,"column_end":21},"name":"write_fmt","qualname":"<Interface<Term>>::write_fmt","value":"fn (&self, args: fmt::Arguments) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes formatted text to the terminal display.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":55707,"byte_end":55717,"line_start":400,"line_end":400,"column_start":12,"column_end":22},"name":"set_prompt","qualname":"<Interface<Term>>::set_prompt","value":"fn (&self, prompt: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the prompt that will be displayed when `read_line` is called.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":56025,"byte_end":56035,"line_start":410,"line_end":410,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<Interface<Term>>::set_buffer","value":"fn (&self, buf: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the input buffer to the given string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":56298,"byte_end":56308,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"set_cursor","qualname":"<Interface<Term>>::set_cursor","value":"fn (&self, pos: usize) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the cursor position in the input buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":56817,"byte_end":56828,"line_start":431,"line_end":431,"column_start":12,"column_end":23},"name":"add_history","qualname":"<Interface<Term>>::add_history","value":"fn (&self, line: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a line to history.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":57078,"byte_end":57096,"line_start":438,"line_end":438,"column_start":12,"column_end":30},"name":"add_history_unique","qualname":"<Interface<Term>>::add_history_unique","value":"fn (&self, line: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a line to history, unless it is identical to the most recent entry.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":57309,"byte_end":57322,"line_start":445,"line_end":445,"column_start":12,"column_end":25},"name":"clear_history","qualname":"<Interface<Term>>::clear_history","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all history entries.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":57603,"byte_end":57617,"line_start":454,"line_end":454,"column_start":12,"column_end":26},"name":"remove_history","qualname":"<Interface<Term>>::remove_history","value":"fn (&self, idx: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the history entry at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":57985,"byte_end":58001,"line_start":464,"line_end":464,"column_start":12,"column_end":28},"name":"set_history_size","qualname":"<Interface<Term>>::set_history_size","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the maximum number of history entries.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":58235,"byte_end":58251,"line_start":471,"line_end":471,"column_start":12,"column_end":28},"name":"truncate_history","qualname":"<Interface<Term>>::truncate_history","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncates history to the only the most recent `n` entries.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":448},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memory","qualname":"::memory","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/memory.rs","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":484},{"krate":0,"index":2094},{"krate":0,"index":2100},{"krate":0,"index":2096},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2110},{"krate":0,"index":2112},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":538},{"krate":0,"index":542},{"krate":0,"index":556},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":598},{"krate":0,"index":608},{"krate":0,"index":622}],"decl_id":null,"docs":" Implements an in-memory `Terminal` interface","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":484},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":58762,"byte_end":58774,"line_start":18,"line_end":18,"column_start":11,"column_end":23},"name":"DEFAULT_SIZE","qualname":"::memory::DEFAULT_SIZE","value":"Size","parent":null,"children":[],"decl_id":null,"docs":" Default size of a `MemoryTerminal` buffer\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2094},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":59052,"byte_end":59066,"line_start":28,"line_end":28,"column_start":12,"column_end":26},"name":"MemoryTerminal","qualname":"::memory::MemoryTerminal","value":"MemoryTerminal {  }","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":815}],"decl_id":null,"docs":" Implements an in-memory `Terminal` interface","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":486},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":59444,"byte_end":59459,"line_start":50,"line_end":50,"column_start":12,"column_end":27},"name":"MemoryReadGuard","qualname":"::memory::MemoryReadGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Holds the lock on read operations of a `MemoryTerminal`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":488},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":59563,"byte_end":59579,"line_start":53,"line_end":53,"column_start":12,"column_end":28},"name":"MemoryWriteGuard","qualname":"::memory::MemoryWriteGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Holds the lock on write operations of a `MemoryTerminal`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":59712,"byte_end":59715,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<MemoryTerminal>::new","value":"fn () -> MemoryTerminal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `MemoryTerminal` with the default buffer size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":59952,"byte_end":59961,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"with_size","qualname":"<MemoryTerminal>::with_size","value":"fn (size: Size) -> MemoryTerminal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `MemoryTerminal` with the given buffer size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":60231,"byte_end":60240,"line_start":74,"line_end":74,"column_start":12,"column_end":21},"name":"clear_all","qualname":"<MemoryTerminal>::clear_all","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the terminal buffer and places the cursor at `(0, 0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":60388,"byte_end":60400,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"clear_to_end","qualname":"<MemoryTerminal>::clear_to_end","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears all characters beginning at the cursor and ending at buffer end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":60504,"byte_end":60515,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"clear_input","qualname":"<MemoryTerminal>::clear_input","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the input buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":60639,"byte_end":60648,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"has_input","qualname":"<MemoryTerminal>::has_input","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether any input remains to be read.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":61046,"byte_end":61051,"line_start":101,"line_end":101,"column_start":12,"column_end":17},"name":"lines","qualname":"<MemoryTerminal>::lines","value":"fn (&self) -> Lines","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over lines in the buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":61213,"byte_end":61220,"line_start":109,"line_end":109,"column_start":12,"column_end":19},"name":"move_up","qualname":"<MemoryTerminal>::move_up","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor up `n` cells.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":61338,"byte_end":61347,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"move_down","qualname":"<MemoryTerminal>::move_down","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor down `n` cells.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":61467,"byte_end":61476,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"move_left","qualname":"<MemoryTerminal>::move_left","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor left `n` cells.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":61597,"byte_end":61607,"line_start":124,"line_end":124,"column_start":12,"column_end":22},"name":"move_right","qualname":"<MemoryTerminal>::move_right","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor right `n` cells.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":61753,"byte_end":61773,"line_start":129,"line_end":129,"column_start":12,"column_end":32},"name":"move_to_first_column","qualname":"<MemoryTerminal>::move_to_first_column","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the first column of the current line.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":61919,"byte_end":61929,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"push_input","qualname":"<MemoryTerminal>::push_input","value":"fn (&self, s: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes a character sequence to the back of the input queue.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":62067,"byte_end":62077,"line_start":139,"line_end":139,"column_start":12,"column_end":22},"name":"read_input","qualname":"<MemoryTerminal>::read_input","value":"fn (&self, buf: &mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Reads some input from the input buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":62438,"byte_end":62444,"line_start":150,"line_end":150,"column_start":12,"column_end":18},"name":"resize","qualname":"<MemoryTerminal>::resize","value":"fn (&self, new_size: Size) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Changes the size of the terminal buffer.\n The buffer will be truncated or filled with spaces, as necessary.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":62685,"byte_end":62694,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"scroll_up","qualname":"<MemoryTerminal>::scroll_up","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the contents of the buffer up `n` lines.\n The first `n` lines of text will be erased.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":62834,"byte_end":62840,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"cursor","qualname":"<MemoryTerminal>::cursor","value":"fn (&self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Returns the `(line, column)` position of the cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":62976,"byte_end":62991,"line_start":168,"line_end":168,"column_start":12,"column_end":27},"name":"set_cursor_mode","qualname":"<MemoryTerminal>::set_cursor_mode","value":"fn (&self, mode: CursorMode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the cursor mode.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":63120,"byte_end":63131,"line_start":173,"line_end":173,"column_start":12,"column_end":23},"name":"cursor_mode","qualname":"<MemoryTerminal>::cursor_mode","value":"fn (&self) -> CursorMode","parent":null,"children":[],"decl_id":null,"docs":" Returns the cursor mode.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":63263,"byte_end":63267,"line_start":178,"line_end":178,"column_start":12,"column_end":16},"name":"size","qualname":"<MemoryTerminal>::size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the terminal buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":63534,"byte_end":63539,"line_start":186,"line_end":186,"column_start":12,"column_end":17},"name":"write","qualname":"<MemoryTerminal>::write","value":"fn (&self, s: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes some text into the buffer.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":590},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":68474,"byte_end":68479,"line_start":379,"line_end":379,"column_start":12,"column_end":17},"name":"Lines","qualname":"::memory::Lines","value":"Lines {  }","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":147}],"decl_id":null,"docs":" Iterator over lines in a `MemoryTerminal` buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":68619,"byte_end":68623,"line_start":386,"line_end":386,"column_start":12,"column_end":16},"name":"next","qualname":"<Lines<'a>>::next","value":"fn (&mut self) -> Option<&[char]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next line in the buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":69031,"byte_end":69046,"line_start":399,"line_end":399,"column_start":12,"column_end":27},"name":"lines_remaining","qualname":"<Lines<'a>>::lines_remaining","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of lines remaining in the iterator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":646},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prompter","qualname":"::prompter","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/prompter.rs","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":670},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":690},{"krate":0,"index":698},{"krate":0,"index":708},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":758},{"krate":0,"index":760}],"decl_id":null,"docs":" Provides access to prompt input state\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":75656,"byte_end":75664,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"Prompter","qualname":"::prompter::Prompter","value":"Prompter {  }","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":167}],"decl_id":null,"docs":" Provides access to the current state of input while a `read_line` call\n is in progress.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":76458,"byte_end":76471,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"writer_append","qualname":"<Prompter<'a, 'b, Term>>::writer_append","value":"fn <'c> (&'c mut self) -> io::Result<Writer<'c, 'b, Term>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Writer` instance using the currently held write lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":77003,"byte_end":77015,"line_start":75,"line_end":75,"column_start":12,"column_end":24},"name":"writer_erase","qualname":"<Prompter<'a, 'b, Term>>::writer_erase","value":"fn <'c> (&'c mut self) -> io::Result<Writer<'c, 'b, Term>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Writer` instance using the currently held write lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":83117,"byte_end":83123,"line_start":239,"line_end":239,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Prompter<'a, 'b, Term>>::buffer","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the current buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":83351,"byte_end":83364,"line_start":247,"line_end":247,"column_start":12,"column_end":25},"name":"backup_buffer","qualname":"<Prompter<'a, 'b, Term>>::backup_buffer","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the \"backup\" buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":83599,"byte_end":83620,"line_start":254,"line_end":254,"column_start":12,"column_end":33},"name":"last_command_category","qualname":"<Prompter<'a, 'b, Term>>::last_command_category","value":"fn (&self) -> Category","parent":null,"children":[],"decl_id":null,"docs":" Returns the command `Category` of the most recently executed command.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":83753,"byte_end":83769,"line_start":259,"line_end":259,"column_start":12,"column_end":28},"name":"word_break_chars","qualname":"<Prompter<'a, 'b, Term>>::word_break_chars","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the set of characters that indicate a word break.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":83941,"byte_end":83951,"line_start":266,"line_end":266,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<Prompter<'a, 'b, Term>>::set_buffer","value":"fn (&mut self, buf: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the buffer to the given value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":84099,"byte_end":84105,"line_start":271,"line_end":271,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Prompter<'a, 'b, Term>>::cursor","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current position of the cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":84353,"byte_end":84363,"line_start":280,"line_end":280,"column_start":12,"column_end":22},"name":"set_cursor","qualname":"<Prompter<'a, 'b, Term>>::set_cursor","value":"fn (&mut self, pos: usize) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the cursor to the given position within the buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":84793,"byte_end":84803,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"set_prompt","qualname":"<Prompter<'a, 'b, Term>>::set_prompt","value":"fn (&mut self, prompt: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the prompt that will be displayed when `read_line` is called.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":84974,"byte_end":84985,"line_start":296,"line_end":296,"column_start":12,"column_end":23},"name":"screen_size","qualname":"<Prompter<'a, 'b, Term>>::screen_size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the terminal at the last draw operation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":85134,"byte_end":85146,"line_start":301,"line_end":301,"column_start":12,"column_end":24},"name":"explicit_arg","qualname":"<Prompter<'a, 'b, Term>>::explicit_arg","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether a numerical argument was explicitly supplied by the user.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":85258,"byte_end":85266,"line_start":306,"line_end":306,"column_start":12,"column_end":20},"name":"sequence","qualname":"<Prompter<'a, 'b, Term>>::sequence","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the current input sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":85379,"byte_end":85387,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"bindings","qualname":"<Prompter<'a, 'b, Term>>::bindings","value":"fn (&self) -> BindingIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over bound sequences\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":85509,"byte_end":85518,"line_start":316,"line_end":316,"column_start":12,"column_end":21},"name":"variables","qualname":"<Prompter<'a, 'b, Term>>::variables","value":"fn (&self) -> VariableIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over variable values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":85641,"byte_end":85648,"line_start":321,"line_end":321,"column_start":12,"column_end":19},"name":"history","qualname":"<Prompter<'a, 'b, Term>>::history","value":"fn (&self) -> HistoryIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over history entries\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":85865,"byte_end":85878,"line_start":328,"line_end":328,"column_start":12,"column_end":25},"name":"history_index","qualname":"<Prompter<'a, 'b, Term>>::history_index","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index into history currently being edited.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":86011,"byte_end":86022,"line_start":333,"line_end":333,"column_start":12,"column_end":23},"name":"history_len","qualname":"<Prompter<'a, 'b, Term>>::history_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current number of history entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":86525,"byte_end":86545,"line_start":352,"line_end":352,"column_start":12,"column_end":32},"name":"select_history_entry","qualname":"<Prompter<'a, 'b, Term>>::select_history_entry","value":"fn (&mut self, new: Option<usize>) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Selects the history entry currently being edited by the user.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":86832,"byte_end":86843,"line_start":360,"line_end":360,"column_start":12,"column_end":23},"name":"completions","qualname":"<Prompter<'a, 'b, Term>>::completions","value":"fn (&self) -> Option<&[Completion]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current set of completions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":87322,"byte_end":87337,"line_start":372,"line_end":372,"column_start":12,"column_end":27},"name":"set_completions","qualname":"<Prompter<'a, 'b, Term>>::set_completions","value":"fn (&mut self, completions: Option<Vec<Completion>>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the current set of completions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":107195,"byte_end":107207,"line_start":902,"line_end":902,"column_start":12,"column_end":24},"name":"accept_input","qualname":"<Prompter<'a, 'b, Term>>::accept_input","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accepts the current input buffer as user input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":107704,"byte_end":107709,"line_start":916,"line_end":916,"column_start":12,"column_end":17},"name":"blink","qualname":"<Prompter<'a, 'b, Term>>::blink","value":"fn (&mut self, pos: usize) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the given position, waits for 500 milliseconds\n (or until next user input), then restores the original cursor position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":120235,"byte_end":120247,"line_start":1301,"line_end":1301,"column_start":12,"column_end":24},"name":"delete_range","qualname":"<Prompter<'a, 'b, Term>>::delete_range","value":"fn <R> (&mut self, range: R) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Deletes a range of text from the input buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":120580,"byte_end":120590,"line_start":1311,"line_end":1311,"column_start":12,"column_end":22},"name":"kill_range","qualname":"<Prompter<'a, 'b, Term>>::kill_range","value":"fn <R> (&mut self, range: R) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Deletes a range from the buffer and adds the removed text to the\n kill ring.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":122360,"byte_end":122375,"line_start":1369,"line_end":1369,"column_start":12,"column_end":27},"name":"transpose_range","qualname":"<Prompter<'a, 'b, Term>>::transpose_range","value":"fn (&mut self, src: Range<usize>, dest: Range<usize>) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Transposes two regions of the buffer, `src` and `dest`.\n The cursor is placed at the end of the new location of `src`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":122663,"byte_end":122667,"line_start":1376,"line_end":1376,"column_start":12,"column_end":16},"name":"yank","qualname":"<Prompter<'a, 'b, Term>>::yank","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Insert text from the front of the kill ring at the current cursor position.\n The cursor is placed at the end of the new text.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":123113,"byte_end":123121,"line_start":1390,"line_end":1390,"column_start":12,"column_end":20},"name":"yank_pop","qualname":"<Prompter<'a, 'b, Term>>::yank_pop","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotates the kill ring and replaces yanked text with the new front.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":125439,"byte_end":125445,"line_start":1465,"line_end":1465,"column_start":12,"column_end":18},"name":"insert","qualname":"<Prompter<'a, 'b, Term>>::insert","value":"fn (&mut self, n: usize, ch: char) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Insert a given character at the current cursor position `n` times.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":125758,"byte_end":125768,"line_start":1477,"line_end":1477,"column_start":12,"column_end":22},"name":"insert_str","qualname":"<Prompter<'a, 'b, Term>>::insert_str","value":"fn (&mut self, s: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Insert a string at the current cursor position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":125976,"byte_end":125996,"line_start":1484,"line_end":1484,"column_start":12,"column_end":32},"name":"replace_str_backward","qualname":"<Prompter<'a, 'b, Term>>::replace_str_backward","value":"fn <R> (&mut self, range: R, s: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Replaces a range in the buffer and redraws.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":126340,"byte_end":126359,"line_start":1494,"line_end":1494,"column_start":12,"column_end":31},"name":"replace_str_forward","qualname":"<Prompter<'a, 'b, Term>>::replace_str_forward","value":"fn <R> (&mut self, range: R, s: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Replaces a range in the buffer and redraws.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":922},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reader","qualname":"::reader","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/reader.rs","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":942},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":956},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":970},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":998},{"krate":0,"index":1012},{"krate":0,"index":1018},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":2116},{"krate":0,"index":2118},{"krate":0,"index":2122},{"krate":0,"index":2132},{"krate":0,"index":2128},{"krate":0,"index":2124},{"krate":0,"index":1042},{"krate":0,"index":1172},{"krate":0,"index":1190},{"krate":0,"index":1196},{"krate":0,"index":1200},{"krate":0,"index":1206},{"krate":0,"index":1210},{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1258},{"krate":0,"index":1268},{"krate":0,"index":1272},{"krate":0,"index":1276}],"decl_id":null,"docs":" Provides access to terminal read operations\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1026},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":128116,"byte_end":128128,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"name":"STRING_CHARS","qualname":"::reader::STRING_CHARS","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" Default set of string characters\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1028},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":128196,"byte_end":128212,"line_start":33,"line_end":33,"column_start":11,"column_end":27},"name":"WORD_BREAK_CHARS","qualname":"::reader::WORD_BREAK_CHARS","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" Default set of word break characters\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1030},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":128331,"byte_end":128346,"line_start":36,"line_end":36,"column_start":11,"column_end":26},"name":"START_INVISIBLE","qualname":"::reader::START_INVISIBLE","value":"char","parent":null,"children":[],"decl_id":null,"docs":" Indicates the start of a series of invisible characters in the prompt\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1032},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":128446,"byte_end":128459,"line_start":39,"line_end":39,"column_start":11,"column_end":24},"name":"END_INVISIBLE","qualname":"::reader::END_INVISIBLE","value":"char","parent":null,"children":[],"decl_id":null,"docs":" Indicates the end of a series of invisible characters in the prompt\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1036},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":128989,"byte_end":128995,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"Reader","qualname":"::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":229}],"decl_id":null,"docs":" Provides access to data related to reading and processing user input.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":833},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":131126,"byte_end":131129,"line_start":126,"line_end":126,"column_start":5,"column_end":8},"name":"Eof","qualname":"::reader::ReadResult::Eof","value":"ReadResult::Eof","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" User issued end-of-file\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":835},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":131163,"byte_end":131168,"line_start":128,"line_end":128,"column_start":5,"column_end":10},"name":"Input","qualname":"::reader::ReadResult::Input","value":"ReadResult::Input(String)","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" User input received\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":839},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":131219,"byte_end":131225,"line_start":130,"line_end":130,"column_start":5,"column_end":11},"name":"Signal","qualname":"::reader::ReadResult::Signal","value":"ReadResult::Signal(Signal)","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" Reported signal was received\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2116},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":131077,"byte_end":131087,"line_start":124,"line_end":124,"column_start":10,"column_end":20},"name":"ReadResult","qualname":"::reader::ReadResult","value":"ReadResult::{Eof, Input, Signal}","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":839}],"decl_id":null,"docs":" Returned from [`read_line`] to indicate user input","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":132562,"byte_end":132571,"line_start":172,"line_end":172,"column_start":12,"column_end":21},"name":"read_line","qualname":"<Reader<'a, Term>>::read_line","value":"fn (&mut self) -> io::Result<ReadResult>","parent":null,"children":[],"decl_id":null,"docs":" Interactively reads a line from the terminal device.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":133515,"byte_end":133529,"line_start":197,"line_end":197,"column_start":12,"column_end":26},"name":"read_line_step","qualname":"<Reader<'a, Term>>::read_line_step","value":"fn (&mut self, timeout: Option<Duration>) -> io::Result<Option<ReadResult>>","parent":null,"children":[],"decl_id":null,"docs":" Performs one step of the interactive `read_line` loop.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":134341,"byte_end":134357,"line_start":220,"line_end":220,"column_start":12,"column_end":28},"name":"cancel_read_line","qualname":"<Reader<'a, Term>>::cancel_read_line","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Cancels an in-progress `read_line` operation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":138103,"byte_end":138113,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<Reader<'a, Term>>::set_buffer","value":"fn (&mut self, buf: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the input buffer to the given string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":138596,"byte_end":138606,"line_start":348,"line_end":348,"column_start":12,"column_end":22},"name":"set_cursor","qualname":"<Reader<'a, Term>>::set_cursor","value":"fn (&mut self, pos: usize) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the cursor position in the input buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":139260,"byte_end":139270,"line_start":366,"line_end":366,"column_start":12,"column_end":22},"name":"set_prompt","qualname":"<Reader<'a, Term>>::set_prompt","value":"fn (&mut self, prompt: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the prompt that will be displayed when `read_line` is called.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":139566,"byte_end":139577,"line_start":375,"line_end":375,"column_start":12,"column_end":23},"name":"add_history","qualname":"<Reader<'a, Term>>::add_history","value":"fn (&self, line: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a line to history.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":139958,"byte_end":139976,"line_start":386,"line_end":386,"column_start":12,"column_end":30},"name":"add_history_unique","qualname":"<Reader<'a, Term>>::add_history_unique","value":"fn (&self, line: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a line to history, unless it is identical to the most recent entry.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":140320,"byte_end":140333,"line_start":397,"line_end":397,"column_start":12,"column_end":25},"name":"clear_history","qualname":"<Reader<'a, Term>>::clear_history","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all history entries.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":140745,"byte_end":140759,"line_start":410,"line_end":410,"column_start":12,"column_end":26},"name":"remove_history","qualname":"<Reader<'a, Term>>::remove_history","value":"fn (&self, idx: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the history entry at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":141258,"byte_end":141274,"line_start":424,"line_end":424,"column_start":12,"column_end":28},"name":"set_history_size","qualname":"<Reader<'a, Term>>::set_history_size","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the maximum number of history entries.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":141639,"byte_end":141655,"line_start":435,"line_end":435,"column_start":12,"column_end":28},"name":"truncate_history","qualname":"<Reader<'a, Term>>::truncate_history","value":"fn (&self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncates history to the only the most recent `n` entries.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":141833,"byte_end":141844,"line_start":442,"line_end":442,"column_start":12,"column_end":23},"name":"application","qualname":"<Reader<'a, Term>>::application","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the application name\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":141945,"byte_end":141960,"line_start":447,"line_end":447,"column_start":12,"column_end":27},"name":"set_application","qualname":"<Reader<'a, Term>>::set_application","value":"fn <T> (&mut self, application: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the application name\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":142171,"byte_end":142180,"line_start":453,"line_end":453,"column_start":12,"column_end":21},"name":"completer","qualname":"<Reader<'a, Term>>::completer","value":"fn (&self) -> &Arc<Completer<Term>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the current completer instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":142335,"byte_end":142348,"line_start":458,"line_end":458,"column_start":12,"column_end":25},"name":"set_completer","qualname":"<Reader<'a, Term>>::set_completer","value":"fn (&mut self, completer: Arc<Completer<Term>>) -> Arc<Completer<Term>>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the current completer, returning the previous instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":142596,"byte_end":142608,"line_start":465,"line_end":465,"column_start":12,"column_end":24},"name":"get_variable","qualname":"<Reader<'a, Term>>::get_variable","value":"fn (&self, name: &str) -> Option<Variable>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the named variable or `None`\n if no such variable exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":142927,"byte_end":142939,"line_start":474,"line_end":474,"column_start":12,"column_end":24},"name":"set_variable","qualname":"<Reader<'a, Term>>::set_variable","value":"fn (&mut self, name: &str, value: &str) -> Option<Variable>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the named variable and returns the previous\n value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":143111,"byte_end":143120,"line_start":479,"line_end":479,"column_start":12,"column_end":21},"name":"variables","qualname":"<Reader<'a, Term>>::variables","value":"fn (&self) -> VariableIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over stored variables.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":143376,"byte_end":143396,"line_start":487,"line_end":487,"column_start":12,"column_end":32},"name":"blink_matching_paren","qualname":"<Reader<'a, Term>>::blink_matching_paren","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether to \"blink\" matching opening parenthesis character\n when a closing parenthesis character is entered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":143521,"byte_end":143545,"line_start":492,"line_end":492,"column_start":12,"column_end":36},"name":"set_blink_matching_paren","qualname":"<Reader<'a, Term>>::set_blink_matching_paren","value":"fn (&mut self, set: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `blink-matching-paren` variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":143697,"byte_end":143710,"line_start":497,"line_end":497,"column_start":12,"column_end":25},"name":"catch_signals","qualname":"<Reader<'a, Term>>::catch_signals","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether `linefeed` will catch certain signals.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":143968,"byte_end":143985,"line_start":505,"line_end":505,"column_start":12,"column_end":29},"name":"set_catch_signals","qualname":"<Reader<'a, Term>>::set_catch_signals","value":"fn (&mut self, enabled: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether `linefeed` will catch certain signals.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":144130,"byte_end":144143,"line_start":510,"line_end":510,"column_start":12,"column_end":25},"name":"ignore_signal","qualname":"<Reader<'a, Term>>::ignore_signal","value":"fn (&self, signal: Signal) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the given `Signal` is ignored.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":144302,"byte_end":144319,"line_start":515,"line_end":515,"column_start":12,"column_end":29},"name":"set_ignore_signal","qualname":"<Reader<'a, Term>>::set_ignore_signal","value":"fn (&mut self, signal: Signal, set: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether the given `Signal` will be ignored.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":144643,"byte_end":144656,"line_start":525,"line_end":525,"column_start":12,"column_end":25},"name":"report_signal","qualname":"<Reader<'a, Term>>::report_signal","value":"fn (&self, signal: Signal) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the given `Signal` is to be reported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":144959,"byte_end":144976,"line_start":533,"line_end":533,"column_start":12,"column_end":29},"name":"set_report_signal","qualname":"<Reader<'a, Term>>::set_report_signal","value":"fn (&mut self, signal: Signal, set: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to report the given `Signal`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":145336,"byte_end":145354,"line_start":545,"line_end":545,"column_start":12,"column_end":30},"name":"disable_completion","qualname":"<Reader<'a, Term>>::disable_completion","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether Tab completion is disabled.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":145475,"byte_end":145497,"line_start":550,"line_end":550,"column_start":12,"column_end":34},"name":"set_disable_completion","qualname":"<Reader<'a, Term>>::set_disable_completion","value":"fn (&mut self, disable: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `disable-completion` variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":145764,"byte_end":145787,"line_start":558,"line_end":558,"column_start":12,"column_end":35},"name":"echo_control_characters","qualname":"<Reader<'a, Term>>::echo_control_characters","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" When certain control characters are pressed, a character sequence\n equivalent to this character will be echoed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":145918,"byte_end":145945,"line_start":563,"line_end":563,"column_start":12,"column_end":39},"name":"set_echo_control_characters","qualname":"<Reader<'a, Term>>::set_echo_control_characters","value":"fn (&mut self, echo: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `echo-control-characters` variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":146123,"byte_end":146150,"line_start":568,"line_end":568,"column_start":12,"column_end":39},"name":"completion_append_character","qualname":"<Reader<'a, Term>>::completion_append_character","value":"fn (&self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Returns the character, if any, that is appended to a successful completion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":146321,"byte_end":146352,"line_start":573,"line_end":573,"column_start":12,"column_end":43},"name":"set_completion_append_character","qualname":"<Reader<'a, Term>>::set_completion_append_character","value":"fn (&mut self, ch: Option<char>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the character, if any, that is appended to a successful completion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":146685,"byte_end":146709,"line_start":583,"line_end":583,"column_start":12,"column_end":36},"name":"completion_display_width","qualname":"<Reader<'a, Term>>::completion_display_width","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the width of completion listing display.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":146843,"byte_end":146871,"line_start":588,"line_end":588,"column_start":12,"column_end":40},"name":"set_completion_display_width","qualname":"<Reader<'a, Term>>::set_completion_display_width","value":"fn (&mut self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `completion-display-width` variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":147115,"byte_end":147137,"line_start":596,"line_end":596,"column_start":12,"column_end":34},"name":"completion_query_items","qualname":"<Reader<'a, Term>>::completion_query_items","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum number of completion items that require user\n confirmation before listing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":147267,"byte_end":147293,"line_start":601,"line_end":601,"column_start":12,"column_end":38},"name":"set_completion_query_items","qualname":"<Reader<'a, Term>>::set_completion_query_items","value":"fn (&mut self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `completion-query-items` variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":147589,"byte_end":147603,"line_start":609,"line_end":609,"column_start":12,"column_end":26},"name":"keyseq_timeout","qualname":"<Reader<'a, Term>>::keyseq_timeout","value":"fn (&self) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Returns the timeout to wait for further user input when an ambiguous\n sequence has been entered. If the value is `None`, wait is indefinite.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":147728,"byte_end":147746,"line_start":614,"line_end":614,"column_start":12,"column_end":30},"name":"set_keyseq_timeout","qualname":"<Reader<'a, Term>>::set_keyseq_timeout","value":"fn (&mut self, timeout: Option<Duration>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `keyseq-timeout` variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":147967,"byte_end":147983,"line_start":621,"line_end":621,"column_start":12,"column_end":28},"name":"page_completions","qualname":"<Reader<'a, Term>>::page_completions","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether to list possible completions one page at a time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":148100,"byte_end":148120,"line_start":626,"line_end":626,"column_start":12,"column_end":32},"name":"set_page_completions","qualname":"<Reader<'a, Term>>::set_page_completions","value":"fn (&mut self, set: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `page-completions` variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":148346,"byte_end":148376,"line_start":634,"line_end":634,"column_start":12,"column_end":42},"name":"print_completions_horizontally","qualname":"<Reader<'a, Term>>::print_completions_horizontally","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether to list completions horizontally, rather than down\n the screen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":148521,"byte_end":148555,"line_start":639,"line_end":639,"column_start":12,"column_end":46},"name":"set_print_completions_horizontally","qualname":"<Reader<'a, Term>>::set_print_completions_horizontally","value":"fn (&mut self, set: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `print-completions-horizontally` variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":148714,"byte_end":148726,"line_start":644,"line_end":644,"column_start":12,"column_end":24},"name":"string_chars","qualname":"<Reader<'a, Term>>::string_chars","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the set of characters that delimit strings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":148851,"byte_end":148867,"line_start":649,"line_end":649,"column_start":12,"column_end":28},"name":"set_string_chars","qualname":"<Reader<'a, Term>>::set_string_chars","value":"fn <T> (&mut self, chars: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the set of characters that delimit strings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":149070,"byte_end":149086,"line_start":655,"line_end":655,"column_start":12,"column_end":28},"name":"word_break_chars","qualname":"<Reader<'a, Term>>::word_break_chars","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the set of characters that indicate a word break.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":149215,"byte_end":149235,"line_start":660,"line_end":660,"column_start":12,"column_end":32},"name":"set_word_break_chars","qualname":"<Reader<'a, Term>>::set_word_break_chars","value":"fn <T> (&mut self, chars: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the set of characters that indicate a word break.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":149419,"byte_end":149427,"line_start":666,"line_end":666,"column_start":12,"column_end":20},"name":"bindings","qualname":"<Reader<'a, Term>>::bindings","value":"fn (&self) -> BindingIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over bound sequences\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":149592,"byte_end":149605,"line_start":673,"line_end":673,"column_start":12,"column_end":25},"name":"bind_sequence","qualname":"<Reader<'a, Term>>::bind_sequence","value":"fn <T> (&mut self, seq: T, cmd: Command) -> Option<Command>","parent":null,"children":[],"decl_id":null,"docs":" Binds a sequence to a command.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":149945,"byte_end":149969,"line_start":682,"line_end":682,"column_start":12,"column_end":36},"name":"bind_sequence_if_unbound","qualname":"<Reader<'a, Term>>::bind_sequence_if_unbound","value":"fn <T> (&mut self, seq: T, cmd: Command) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Binds a sequence to a command, if and only if the given sequence\n is not already bound to a command.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":150236,"byte_end":150251,"line_start":690,"line_end":690,"column_start":12,"column_end":27},"name":"unbind_sequence","qualname":"<Reader<'a, Term>>::unbind_sequence","value":"fn (&mut self, seq: &str) -> Option<Command>","parent":null,"children":[],"decl_id":null,"docs":" Removes a binding for the given sequence.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":150681,"byte_end":150696,"line_start":701,"line_end":701,"column_start":12,"column_end":27},"name":"define_function","qualname":"<Reader<'a, Term>>::define_function","value":"fn <T> (&mut self, name: T, cmd: Arc<Function<Term>>) -> Option<Arc<Function<Term>>>","parent":null,"children":[],"decl_id":null,"docs":" Defines a named function to which sequences may be bound.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":150989,"byte_end":151004,"line_start":709,"line_end":709,"column_start":12,"column_end":27},"name":"remove_function","qualname":"<Reader<'a, Term>>::remove_function","value":"fn (&mut self, name: &str) -> Option<Arc<Function<Term>>>","parent":null,"children":[],"decl_id":null,"docs":" Removes a function defined with the given name.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1254},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160272,"byte_end":160283,"line_start":1034,"line_end":1034,"column_start":12,"column_end":23},"name":"BindingIter","qualname":"::reader::BindingIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Iterator over `Reader` bindings\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1278},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"table","qualname":"::table","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/table.rs","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1294},{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1308},{"krate":0,"index":1310}],"decl_id":null,"docs":" Provides utilities for formatting strings in a table\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1284},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":165533,"byte_end":165538,"line_start":12,"line_end":12,"column_start":12,"column_end":17},"name":"Table","qualname":"::table::Table","value":"Table {  }","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":377}],"decl_id":null,"docs":" Represents a table of strings, formatted into rows and columns","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":166136,"byte_end":166139,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Table<'a, S>>::new","value":"fn (strs: &'a [S], mut sizes: Option<&'a [usize]>, horizontal: bool) -> Table<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new table from the given set of strings, using the given\n column sizes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":166812,"byte_end":166820,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"has_more","qualname":"<Table<'a, S>>::has_more","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether more lines are present in the table.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1300},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":167952,"byte_end":167956,"line_start":110,"line_end":110,"column_start":12,"column_end":16},"name":"Line","qualname":"::table::Line","value":"Line {  }","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":401}],"decl_id":null,"docs":" Represents a single line of the table","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1308},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":168809,"byte_end":168823,"line_start":138,"line_end":138,"column_start":8,"column_end":22},"name":"format_columns","qualname":"::table::format_columns","value":"fn <S> (strs: &[S], screen_width: usize, horizontal: bool) -> Option<Vec<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Formats a series of strings into columns, fitting within a given screen width.\n Returns the size of each resulting column, including spacing.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1312},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"terminal","qualname":"::terminal","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/terminal.rs","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1330},{"krate":0,"index":1332},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1356},{"krate":0,"index":1370},{"krate":0,"index":1394},{"krate":0,"index":1402},{"krate":0,"index":1412},{"krate":0,"index":1426}],"decl_id":null,"docs":" Provides a low-level terminal interface\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1342},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171419,"byte_end":171434,"line_start":12,"line_end":12,"column_start":12,"column_end":27},"name":"DefaultTerminal","qualname":"::terminal::DefaultTerminal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Default `Terminal` interface\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":425},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171579,"byte_end":171584,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::terminal::RawRead::Bytes","value":"RawRead::Bytes(usize)","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" `n` bytes were read from the device\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":429},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171637,"byte_end":171643,"line_start":19,"line_end":19,"column_start":5,"column_end":11},"name":"Resize","qualname":"::terminal::RawRead::Resize","value":"RawRead::Resize(Size)","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" The terminal window was resized\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":433},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171709,"byte_end":171715,"line_start":21,"line_end":21,"column_start":5,"column_end":11},"name":"Signal","qualname":"::terminal::RawRead::Signal","value":"RawRead::Signal(Signal)","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" A signal was received while waiting for input\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1344},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171521,"byte_end":171528,"line_start":15,"line_end":15,"column_start":10,"column_end":17},"name":"RawRead","qualname":"::terminal::RawRead","value":"RawRead::{Bytes, Resize, Signal}","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":429},{"krate":0,"index":433}],"decl_id":null,"docs":" Represents the result of a `Terminal` read operation\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1346},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171788,"byte_end":171796,"line_start":25,"line_end":25,"column_start":11,"column_end":19},"name":"Terminal","qualname":"::terminal::Terminal","value":"Terminal: Sized + Send + Sync","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354}],"decl_id":null,"docs":" Defines a low-level interface to the terminal\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1348},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":172044,"byte_end":172056,"line_start":29,"line_end":29,"column_start":10,"column_end":22},"name":"PrepareState","qualname":"::terminal::Terminal::PrepareState","value":"type PrepareState;","parent":{"krate":0,"index":1346},"children":[],"decl_id":null,"docs":" Returned by `prepare`; passed to `restore` to restore state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":172322,"byte_end":172326,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"name","qualname":"::terminal::Terminal::name","value":"fn (&self) -> &str","parent":{"krate":0,"index":1346},"children":[],"decl_id":null,"docs":" Returns the name of the terminal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":172572,"byte_end":172581,"line_start":44,"line_end":44,"column_start":8,"column_end":17},"name":"lock_read","qualname":"::terminal::Terminal::lock_read","value":"fn <'a> (&'a self) -> Box<TerminalReader<Self> + 'a>","parent":{"krate":0,"index":1346},"children":[],"decl_id":null,"docs":" Acquires a lock on terminal read operations and returns a value holding\n that lock and granting access to such operations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":172861,"byte_end":172871,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"lock_write","qualname":"::terminal::Terminal::lock_write","value":"fn <'a> (&'a self) -> Box<TerminalWriter<Self> + 'a>","parent":{"krate":0,"index":1346},"children":[],"decl_id":null,"docs":" Acquires a lock on terminal write operations and returns a value holding\n that lock and granting access to such operations.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1356},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":172981,"byte_end":172995,"line_start":54,"line_end":54,"column_start":11,"column_end":25},"name":"TerminalReader","qualname":"::terminal::TerminalReader","value":"TerminalReader<Term: Terminal>","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368}],"decl_id":null,"docs":" Holds a lock on `Terminal` read operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":173656,"byte_end":173663,"line_start":69,"line_end":69,"column_start":8,"column_end":15},"name":"prepare","qualname":"::terminal::TerminalReader::prepare","value":"fn (&mut self, block_signals: bool, report_signals: SignalSet) -> io::Result<Term::PrepareState>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Prepares the terminal for line reading and editing operations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":174043,"byte_end":174060,"line_start":78,"line_end":78,"column_start":15,"column_end":32},"name":"prepare_with_lock","qualname":"::terminal::TerminalReader::prepare_with_lock","value":"fn (&mut self, lock: &mut TerminalWriter<Term>, block_signals: bool, report_signals: SignalSet) -> io::Result<Term::PrepareState>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Like `prepare`, but called when the write lock is already held.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":174284,"byte_end":174291,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"restore","qualname":"::terminal::TerminalReader::restore","value":"fn (&mut self, state: Term::PrepareState) -> io::Result<()>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Restores the terminal state using the given state data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":174626,"byte_end":174643,"line_start":91,"line_end":91,"column_start":15,"column_end":32},"name":"restore_with_lock","qualname":"::terminal::TerminalReader::restore_with_lock","value":"fn (&mut self, lock: &mut TerminalWriter<Term>, state: Term::PrepareState) -> io::Result<()>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Like `restore`, but called when the write lock is already held.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":174833,"byte_end":174837,"line_start":95,"line_end":95,"column_start":8,"column_end":12},"name":"read","qualname":"::terminal::TerminalReader::read","value":"fn (&mut self, buf: &mut Vec<u8>) -> io::Result<RawRead>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Reads some input from the terminal and appends it to the given buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":175198,"byte_end":175212,"line_start":103,"line_end":103,"column_start":8,"column_end":22},"name":"wait_for_input","qualname":"::terminal::TerminalReader::wait_for_input","value":"fn (&mut self, timeout: Option<Duration>) -> io::Result<bool>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Waits `timeout` for user input. If `timeout` is `None`, waits indefinitely.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1370},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":175333,"byte_end":175347,"line_start":107,"line_end":107,"column_start":11,"column_end":25},"name":"TerminalWriter","qualname":"::terminal::TerminalWriter","value":"TerminalWriter<Term: Terminal>","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392}],"decl_id":null,"docs":" Holds a lock on `Terminal` write operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":175421,"byte_end":175425,"line_start":109,"line_end":109,"column_start":8,"column_end":12},"name":"size","qualname":"::terminal::TerminalWriter::size","value":"fn (&self) -> io::Result<Size>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Returns the size of the terminal window\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":175821,"byte_end":175833,"line_start":117,"line_end":117,"column_start":8,"column_end":20},"name":"clear_screen","qualname":"::terminal::TerminalWriter::clear_screen","value":"fn (&mut self) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Presents a clear terminal screen, with cursor at first row, first column.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":176069,"byte_end":176088,"line_start":122,"line_end":122,"column_start":8,"column_end":27},"name":"clear_to_screen_end","qualname":"::terminal::TerminalWriter::clear_to_screen_end","value":"fn (&mut self) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Clears characters on the line occupied by the cursor, beginning with the\n cursor and ending at the end of the line. Also clears all characters on\n all lines after the cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":176183,"byte_end":176190,"line_start":125,"line_end":125,"column_start":8,"column_end":15},"name":"move_up","qualname":"::terminal::TerminalWriter::move_up","value":"fn (&mut self, n: usize) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Moves the cursor up `n` cells; `n` may be zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":176297,"byte_end":176306,"line_start":128,"line_end":128,"column_start":8,"column_end":17},"name":"move_down","qualname":"::terminal::TerminalWriter::move_down","value":"fn (&mut self, n: usize) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Moves the cursor down `n` cells; `n` may be zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":176413,"byte_end":176422,"line_start":131,"line_end":131,"column_start":8,"column_end":17},"name":"move_left","qualname":"::terminal::TerminalWriter::move_left","value":"fn (&mut self, n: usize) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Moves the cursor left `n` cells; `n` may be zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":176530,"byte_end":176540,"line_start":134,"line_end":134,"column_start":8,"column_end":18},"name":"move_right","qualname":"::terminal::TerminalWriter::move_right","value":"fn (&mut self, n: usize) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Moves the cursor right `n` cells; `n` may be zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":176654,"byte_end":176674,"line_start":137,"line_end":137,"column_start":8,"column_end":28},"name":"move_to_first_column","qualname":"::terminal::TerminalWriter::move_to_first_column","value":"fn (&mut self) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Moves the cursor to the first column of the current line\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":176749,"byte_end":176764,"line_start":140,"line_end":140,"column_start":8,"column_end":23},"name":"set_cursor_mode","qualname":"::terminal::TerminalWriter::set_cursor_mode","value":"fn (&mut self, mode: CursorMode) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Set the current cursor mode\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":177323,"byte_end":177328,"line_start":152,"line_end":152,"column_start":8,"column_end":13},"name":"write","qualname":"::terminal::TerminalWriter::write","value":"fn (&mut self, s: &str) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Writes output to the terminal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":177591,"byte_end":177596,"line_start":159,"line_end":159,"column_start":8,"column_end":13},"name":"flush","qualname":"::terminal::TerminalWriter::flush","value":"fn (&mut self) -> io::Result<()>","parent":{"krate":0,"index":1370},"children":[],"decl_id":null,"docs":" Flushes any currently buffered output data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":177741,"byte_end":177744,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<DefaultTerminal>::new","value":"fn () -> io::Result<DefaultTerminal>","parent":null,"children":[],"decl_id":null,"docs":" Opens access to the terminal device associated with standard output.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":177927,"byte_end":177933,"line_start":169,"line_end":169,"column_start":12,"column_end":18},"name":"stderr","qualname":"<DefaultTerminal>::stderr","value":"fn () -> io::Result<DefaultTerminal>","parent":null,"children":[],"decl_id":null,"docs":" Opens access to the terminal device associated with standard error.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1484},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":182810,"byte_end":182823,"line_start":69,"line_end":69,"column_start":11,"column_end":24},"name":"RangeArgument","qualname":"::util::RangeArgument","value":"RangeArgument<T>","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1488}],"decl_id":null,"docs":" Implemented for built-in range types\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":182884,"byte_end":182889,"line_start":71,"line_end":71,"column_start":8,"column_end":13},"name":"start","qualname":"::util::RangeArgument::start","value":"fn (&self) -> Option<&T>","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Returns the start of range, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":182974,"byte_end":182977,"line_start":74,"line_end":74,"column_start":8,"column_end":11},"name":"end","qualname":"::util::RangeArgument::end","value":"fn (&self) -> Option<&T>","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Returns the end of range, if present.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1548},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"variables","qualname":"::variables","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/variables.rs","parent":null,"children":[{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2140},{"krate":0,"index":2146},{"krate":0,"index":2142},{"krate":0,"index":1560},{"krate":0,"index":1564},{"krate":0,"index":1568},{"krate":0,"index":1572},{"krate":0,"index":1576},{"krate":0,"index":1580},{"krate":0,"index":1584},{"krate":0,"index":2150},{"krate":0,"index":2152},{"krate":0,"index":2154},{"krate":0,"index":2162},{"krate":0,"index":1586},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600}],"decl_id":null,"docs":" Contains types associated with user-configurable variables\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2134},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":191933,"byte_end":191945,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"VariableIter","qualname":"::variables::VariableIter","value":"VariableIter {  }","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":875}],"decl_id":null,"docs":" Iterator over `Reader` variable values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":879},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192118,"byte_end":192125,"line_start":22,"line_end":22,"column_start":5,"column_end":12},"name":"Boolean","qualname":"::variables::Variable::Boolean","value":"Variable::Boolean(bool)","parent":{"krate":0,"index":2140},"children":[],"decl_id":null,"docs":" Boolean variable\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":883},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192162,"byte_end":192169,"line_start":24,"line_end":24,"column_start":5,"column_end":12},"name":"Integer","qualname":"::variables::Variable::Integer","value":"Variable::Integer(i32)","parent":{"krate":0,"index":2140},"children":[],"decl_id":null,"docs":" Integer variable\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":887},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192204,"byte_end":192210,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"String","qualname":"::variables::Variable::String","value":"Variable::String(Cow<'static, str>)","parent":{"krate":0,"index":2140},"children":[],"decl_id":null,"docs":" String variable\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2140},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192078,"byte_end":192086,"line_start":20,"line_end":20,"column_start":10,"column_end":18},"name":"Variable","qualname":"::variables::Variable","value":"Variable::{Boolean, Integer, String}","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":883},{"krate":0,"index":887}],"decl_id":null,"docs":" Represents a `Reader` variable of a given type\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1602},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"writer","qualname":"::writer","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/linefeed-0.5.4/src/writer.rs","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1612},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1642},{"krate":0,"index":1652},{"krate":0,"index":1658},{"krate":0,"index":1668},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":2168},{"krate":0,"index":2174},{"krate":0,"index":2170},{"krate":0,"index":1852},{"krate":0,"index":1866},{"krate":0,"index":1870},{"krate":0,"index":1876},{"krate":0,"index":1880},{"krate":0,"index":1896},{"krate":0,"index":2176},{"krate":0,"index":2186},{"krate":0,"index":2182},{"krate":0,"index":2178},{"krate":0,"index":1898},{"krate":0,"index":1906},{"krate":0,"index":2188},{"krate":0,"index":2208},{"krate":0,"index":2204},{"krate":0,"index":2200},{"krate":0,"index":2196},{"krate":0,"index":2190},{"krate":0,"index":1910},{"krate":0,"index":1914},{"krate":0,"index":1920},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1938},{"krate":0,"index":2210},{"krate":0,"index":2230},{"krate":0,"index":2226},{"krate":0,"index":2222},{"krate":0,"index":2218},{"krate":0,"index":2212},{"krate":0,"index":1942},{"krate":0,"index":2232},{"krate":0,"index":2246},{"krate":0,"index":2242},{"krate":0,"index":2238},{"krate":0,"index":2234},{"krate":0,"index":1954},{"krate":0,"index":1956},{"krate":0,"index":1958},{"krate":0,"index":1960}],"decl_id":null,"docs":" Provides access to terminal write operations\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":198323,"byte_end":198343,"line_start":3,"line_end":3,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1706},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":200218,"byte_end":200224,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"Writer","qualname":"::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":513}],"decl_id":null,"docs":" Provides an interface to write line-by-line output to the terminal device.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":228562,"byte_end":228569,"line_start":1001,"line_end":1001,"column_start":12,"column_end":19},"name":"history","qualname":"<Writer<'a, 'b, Term>>::history","value":"fn (&self) -> HistoryIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over history entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":228874,"byte_end":228883,"line_start":1010,"line_end":1010,"column_start":12,"column_end":21},"name":"write_str","qualname":"<Writer<'a, 'b, Term>>::write_str","value":"fn (&mut self, s: &str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes some text to the terminal device.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":229440,"byte_end":229449,"line_start":1024,"line_end":1024,"column_start":12,"column_end":21},"name":"write_fmt","qualname":"<Writer<'a, 'b, Term>>::write_fmt","value":"fn (&mut self, args: fmt::Arguments) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes formatted text to the terminal display.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1924},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":235275,"byte_end":235286,"line_start":1254,"line_end":1254,"column_start":12,"column_end":23},"name":"HistoryIter","qualname":"::writer::HistoryIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Iterator over `Interface` history entries\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12754,"byte_end":12761,"line_start":171,"line_end":171,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14277,"byte_end":14287,"line_start":32,"line_end":32,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":15627,"byte_end":15633,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":16568,"byte_end":16574,"line_start":115,"line_end":115,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":17928,"byte_end":17942,"line_start":151,"line_end":151,"column_start":42,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":18231,"byte_end":18244,"line_start":159,"line_end":159,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":23811,"byte_end":23812,"line_start":26,"line_end":26,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":26583,"byte_end":26589,"line_start":91,"line_end":91,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":33688,"byte_end":33694,"line_start":331,"line_end":331,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":33817,"byte_end":33823,"line_start":339,"line_end":339,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":42718,"byte_end":42727,"line_start":51,"line_end":51,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":43302,"byte_end":43311,"line_start":66,"line_end":66,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":46149,"byte_end":46158,"line_start":142,"line_end":142,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":52561,"byte_end":52570,"line_start":307,"line_end":307,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":55345,"byte_end":55354,"line_start":392,"line_end":392,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":59615,"byte_end":59629,"line_start":55,"line_end":55,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":63804,"byte_end":63818,"line_start":199,"line_end":199,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":63920,"byte_end":63926,"line_start":205,"line_end":205,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":64600,"byte_end":64606,"line_start":238,"line_end":238,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":68551,"byte_end":68556,"line_start":384,"line_end":384,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":69135,"byte_end":69149,"line_start":404,"line_end":404,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":69662,"byte_end":69677,"line_start":421,"line_end":421,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":70860,"byte_end":70876,"line_start":461,"line_end":461,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":75822,"byte_end":75830,"line_start":47,"line_end":47,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":131585,"byte_end":131591,"line_start":151,"line_end":151,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1144},{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1152},{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1162},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":151814,"byte_end":151822,"line_start":736,"line_end":736,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":153844,"byte_end":153852,"line_start":810,"line_end":810,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1192},{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154004,"byte_end":154012,"line_start":818,"line_end":818,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154137,"byte_end":154141,"line_start":824,"line_end":824,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154283,"byte_end":154287,"line_start":832,"line_end":832,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154402,"byte_end":154406,"line_start":838,"line_end":838,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160368,"byte_end":160379,"line_start":1036,"line_end":1036,"column_start":32,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160410,"byte_end":160421,"line_start":1038,"line_end":1038,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160871,"byte_end":160882,"line_start":1057,"line_end":1057,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":165716,"byte_end":165721,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":167006,"byte_end":167011,"line_start":75,"line_end":75,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":168107,"byte_end":168111,"line_start":117,"line_end":117,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":177635,"byte_end":177650,"line_start":162,"line_end":162,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":178235,"byte_end":178250,"line_start":179,"line_end":179,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":178639,"byte_end":178656,"line_start":195,"line_end":195,"column_start":46,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":180158,"byte_end":180176,"line_start":243,"line_end":243,"column_start":46,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1446},{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":183040,"byte_end":183045,"line_start":77,"line_end":77,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":183192,"byte_end":183201,"line_start":83,"line_end":83,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":183295,"byte_end":183302,"line_start":87,"line_end":87,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":183392,"byte_end":183401,"line_start":91,"line_end":91,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192254,"byte_end":192262,"line_start":29,"line_end":29,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1562}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192357,"byte_end":192365,"line_start":35,"line_end":35,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192468,"byte_end":192476,"line_start":41,"line_end":41,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192599,"byte_end":192607,"line_start":47,"line_end":47,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192717,"byte_end":192725,"line_start":53,"line_end":53,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192831,"byte_end":192839,"line_start":59,"line_end":59,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":196639,"byte_end":196648,"line_start":158,"line_end":158,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":202097,"byte_end":202106,"line_start":123,"line_end":123,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":227794,"byte_end":227800,"line_start":976,"line_end":976,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":229620,"byte_end":229626,"line_start":1030,"line_end":1030,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1868}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":229891,"byte_end":229900,"line_start":1039,"line_end":1039,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1872},{"krate":0,"index":1874}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":230042,"byte_end":230051,"line_start":1047,"line_end":1047,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1878}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":230145,"byte_end":230150,"line_start":1053,"line_end":1053,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1882},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":233430,"byte_end":233435,"line_start":1179,"line_end":1179,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1900},{"krate":0,"index":1902},{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":234158,"byte_end":234163,"line_start":1208,"line_end":1208,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1908}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":234558,"byte_end":234568,"line_start":1227,"line_end":1227,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1912}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":234705,"byte_end":234715,"line_start":1233,"line_end":1233,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1918}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":234997,"byte_end":235007,"line_start":1244,"line_end":1244,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1922}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":235353,"byte_end":235364,"line_start":1256,"line_end":1256,"column_start":32,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":235395,"byte_end":235406,"line_start":1258,"line_end":1258,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1934},{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":235789,"byte_end":235800,"line_start":1277,"line_end":1277,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1940}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":236065,"byte_end":236080,"line_start":1291,"line_end":1291,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1944},{"krate":0,"index":1946},{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1176,"byte_end":1181,"line_start":48,"line_end":48,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":42}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1191,"byte_end":1198,"line_start":49,"line_end":49,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":76}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1208,"byte_end":1216,"line_start":50,"line_end":50,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":98}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1226,"byte_end":1234,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":188}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1244,"byte_end":1251,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":208}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1261,"byte_end":1270,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":282}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1280,"byte_end":1286,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":448}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1296,"byte_end":1304,"line_start":55,"line_end":55,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":646}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1314,"byte_end":1320,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":922}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1330,"byte_end":1335,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1278}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1345,"byte_end":1353,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1312}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1373,"byte_end":1382,"line_start":60,"line_end":60,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1548}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1392,"byte_end":1398,"line_start":61,"line_end":61,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1602}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,109,97,110,100,46,114,115],"byte_start":12754,"byte_end":12761,"line_start":171,"line_end":171,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":2012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":14277,"byte_end":14287,"line_start":32,"line_end":32,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":2052},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":15627,"byte_end":15633,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":2062},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":16568,"byte_end":16574,"line_start":115,"line_end":115,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":2062},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":16755,"byte_end":16759,"line_start":122,"line_end":122,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1650},"to":{"krate":0,"index":146}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":16762,"byte_end":16766,"line_start":122,"line_end":122,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":1662},"to":{"krate":0,"index":146}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":17928,"byte_end":17942,"line_start":151,"line_end":151,"column_start":42,"column_end":56},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":156},"to":{"krate":0,"index":146}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,99,111,109,112,108,101,116,101,46,114,115],"byte_start":18231,"byte_end":18244,"line_start":159,"line_end":159,"column_start":42,"column_end":55},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":162},"to":{"krate":0,"index":146}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":23120,"byte_end":23124,"line_start":10,"line_end":10,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1650},"to":{"krate":0,"index":198}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":23127,"byte_end":23131,"line_start":10,"line_end":10,"column_start":44,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1662},"to":{"krate":0,"index":198}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":23811,"byte_end":23812,"line_start":26,"line_end":26,"column_start":44,"column_end":45},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":47},"to":{"krate":0,"index":198}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":26583,"byte_end":26589,"line_start":91,"line_end":91,"column_start":10,"column_end":16},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":33688,"byte_end":33694,"line_start":331,"line_end":331,"column_start":10,"column_end":16},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,112,117,116,114,99,46,114,115],"byte_start":33817,"byte_end":33823,"line_start":339,"line_end":339,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":264},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":42718,"byte_end":42727,"line_start":51,"line_end":51,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":43302,"byte_end":43311,"line_start":66,"line_end":66,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":46149,"byte_end":46158,"line_start":142,"line_end":142,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":52561,"byte_end":52570,"line_start":307,"line_end":307,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,105,110,116,101,114,102,97,99,101,46,114,115],"byte_start":55345,"byte_end":55354,"line_start":392,"line_end":392,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":59615,"byte_end":59629,"line_start":55,"line_end":55,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":2094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":63804,"byte_end":63818,"line_start":199,"line_end":199,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":2094},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":63920,"byte_end":63926,"line_start":205,"line_end":205,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":2110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":64600,"byte_end":64606,"line_start":238,"line_end":238,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":2104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":68551,"byte_end":68556,"line_start":384,"line_end":384,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":69135,"byte_end":69149,"line_start":404,"line_end":404,"column_start":19,"column_end":33},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":2094},"to":{"krate":0,"index":1346}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":69662,"byte_end":69677,"line_start":421,"line_end":421,"column_start":45,"column_end":60},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":486},"to":{"krate":0,"index":1356}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,109,101,109,111,114,121,46,114,115],"byte_start":70860,"byte_end":70876,"line_start":461,"line_end":461,"column_start":45,"column_end":61},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":488},"to":{"krate":0,"index":1370}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,112,114,111,109,112,116,101,114,46,114,115],"byte_start":75822,"byte_end":75830,"line_start":47,"line_end":47,"column_start":39,"column_end":47},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":131585,"byte_end":131591,"line_start":151,"line_end":151,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":151814,"byte_end":151822,"line_start":736,"line_end":736,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":153844,"byte_end":153852,"line_start":810,"line_end":810,"column_start":41,"column_end":49},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1040},"to":{"krate":2,"index":1894}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154004,"byte_end":154012,"line_start":818,"line_end":818,"column_start":44,"column_end":52},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1040},"to":{"krate":2,"index":1912}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154137,"byte_end":154141,"line_start":824,"line_end":824,"column_start":32,"column_end":36},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1038},"to":{"krate":2,"index":1894}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154283,"byte_end":154287,"line_start":832,"line_end":832,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1038},"to":{"krate":2,"index":1912}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154402,"byte_end":154406,"line_start":838,"line_end":838,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160368,"byte_end":160379,"line_start":1036,"line_end":1036,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1254},"to":{"krate":2,"index":4236}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160410,"byte_end":160421,"line_start":1038,"line_end":1038,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":1254},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160871,"byte_end":160882,"line_start":1057,"line_end":1057,"column_start":34,"column_end":45},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":1254},"to":{"krate":2,"index":4222}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":165716,"byte_end":165721,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":1284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":167006,"byte_end":167011,"line_start":75,"line_end":75,"column_start":43,"column_end":48},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":1284},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,97,98,108,101,46,114,115],"byte_start":168107,"byte_end":168111,"line_start":117,"line_end":117,"column_start":43,"column_end":47},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":1300},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171798,"byte_end":171803,"line_start":25,"line_end":25,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1656},"to":{"krate":0,"index":1346}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171806,"byte_end":171810,"line_start":25,"line_end":25,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1650},"to":{"krate":0,"index":1346}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":171813,"byte_end":171817,"line_start":25,"line_end":25,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1662},"to":{"krate":0,"index":1346}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":177635,"byte_end":177650,"line_start":162,"line_end":162,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":178235,"byte_end":178250,"line_start":179,"line_end":179,"column_start":19,"column_end":34},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":1342},"to":{"krate":0,"index":1346}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":178639,"byte_end":178656,"line_start":195,"line_end":195,"column_start":46,"column_end":63},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":12,"index":654},"to":{"krate":0,"index":1356}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,116,101,114,109,105,110,97,108,46,114,115],"byte_start":180158,"byte_end":180176,"line_start":243,"line_end":243,"column_start":46,"column_end":64},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":12,"index":656},"to":{"krate":0,"index":1370}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":183040,"byte_end":183045,"line_start":77,"line_end":77,"column_start":30,"column_end":35},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":2,"index":34846},"to":{"krate":0,"index":1484}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":183192,"byte_end":183201,"line_start":83,"line_end":83,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":2,"index":34866},"to":{"krate":0,"index":1484}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":183295,"byte_end":183302,"line_start":87,"line_end":87,"column_start":30,"column_end":37},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":2,"index":34886},"to":{"krate":0,"index":1484}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":183392,"byte_end":183401,"line_start":91,"line_end":91,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":2,"index":34826},"to":{"krate":0,"index":1484}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192254,"byte_end":192262,"line_start":29,"line_end":29,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":2140},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192357,"byte_end":192365,"line_start":35,"line_end":35,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":2140},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192468,"byte_end":192476,"line_start":41,"line_end":41,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":2140},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192599,"byte_end":192607,"line_start":47,"line_end":47,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":2140},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192717,"byte_end":192725,"line_start":53,"line_end":53,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":2140},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":192831,"byte_end":192839,"line_start":59,"line_end":59,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":2140},"to":{"krate":2,"index":7970}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,118,97,114,105,97,98,108,101,115,46,114,115],"byte_start":196639,"byte_end":196648,"line_start":158,"line_end":158,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":2152},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":202097,"byte_end":202106,"line_start":123,"line_end":123,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":1712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":227794,"byte_end":227800,"line_start":976,"line_end":976,"column_start":39,"column_end":45},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":1706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":229620,"byte_end":229626,"line_start":1030,"line_end":1030,"column_start":48,"column_end":54},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":1706},"to":{"krate":2,"index":1922}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":229891,"byte_end":229900,"line_start":1039,"line_end":1039,"column_start":41,"column_end":50},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":1712},"to":{"krate":2,"index":1894}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":230042,"byte_end":230051,"line_start":1047,"line_end":1047,"column_start":44,"column_end":53},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":1712},"to":{"krate":2,"index":1912}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":230145,"byte_end":230150,"line_start":1053,"line_end":1053,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":1710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":233430,"byte_end":233435,"line_start":1179,"line_end":1179,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":2176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":234158,"byte_end":234163,"line_start":1208,"line_end":1208,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":2176},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":234558,"byte_end":234568,"line_start":1227,"line_end":1227,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":2188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":234705,"byte_end":234715,"line_start":1233,"line_end":1233,"column_start":45,"column_end":55},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1708},"to":{"krate":2,"index":1894}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":234997,"byte_end":235007,"line_start":1244,"line_end":1244,"column_start":52,"column_end":62},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1708},"to":{"krate":2,"index":1912}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":235353,"byte_end":235364,"line_start":1256,"line_end":1256,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1924},"to":{"krate":2,"index":4236}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":235395,"byte_end":235406,"line_start":1258,"line_end":1258,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1924},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":235789,"byte_end":235800,"line_start":1277,"line_end":1277,"column_start":34,"column_end":45},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":1924},"to":{"krate":2,"index":4222}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,105,110,101,102,101,101,100,45,48,46,53,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":236065,"byte_end":236080,"line_start":1291,"line_end":1291,"column_start":19,"column_end":34},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":2210},"to":{"krate":2,"index":3838}}]}