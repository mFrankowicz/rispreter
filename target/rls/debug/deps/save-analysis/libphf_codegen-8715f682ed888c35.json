{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51],"program":"/home/mfrankowicz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","phf_codegen","/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","-C","metadata=8715f682ed888c35","-C","extra-filename=-8715f682ed888c35","--out-dir","/home/mfrankowicz/dev/rust/rispreter/target/rls/debug/deps","-L","dependency=/home/mfrankowicz/dev/rust/rispreter/target/rls/debug/deps","--extern","phf_generator=/home/mfrankowicz/dev/rust/rispreter/target/rls/debug/deps/libphf_generator-7f1abf3003a95d47.rlib","--extern","phf_shared=/home/mfrankowicz/dev/rust/rispreter/target/rls/debug/deps/libphf_shared-1a11f8c77c99476a.rlib","--cap-lints","allow","--error-format=json","--sysroot","/home/mfrankowicz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,100,101,118,47,114,117,115,116,47,114,105,115,112,114,101,116,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,112,104,102,95,99,111,100,101,103,101,110,45,56,55,49,53,102,54,56,50,101,100,56,56,56,99,51,53,46,114,108,105,98]},"prelude":{"crate_id":{"name":"phf_codegen","disambiguator":[6606140969549477904,10432007113413445599]},"crate_root":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src","external_crates":[{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16815140564177528544,7667267874726994872]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[187314981474274778,1083661791214681110]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4824384386947771827,11106948233408082830]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[16908032241945569920,8266732003853611156]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[9137853751279309459,8092724810859519352]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[11132156669666639483,11040062018324322438]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5602102949500140880,16916072136176131268]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[10801912057376177381,17504779663444165214]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[15724855950109001065,10349828210234953783]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":10,"id":{"name":"phf_shared","disambiguator":[1159883007494019178,1877888187098121702]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":11,"id":{"name":"siphasher","disambiguator":[8734078984961349022,497373375047912883]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":12,"id":{"name":"phf_generator","disambiguator":[6724433371716026057,936425227546720901]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":13,"id":{"name":"rand","disambiguator":[4733001363616888671,2036421925198022787]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":14,"id":{"name":"rand_core","disambiguator":[8963428313419480028,5013524622957885397]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":15,"id":{"name":"rand_core","disambiguator":[11478423020147085457,10374436499952081859]}},{"file_name":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","num":16,"id":{"name":"libc","disambiguator":[7226129170116673098,2054068373264554520]}}],"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":9123,"line_start":1,"line_end":341,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":9123,"line_start":1,"line_end":341,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mfrankowicz/.cargo/registry/src/github.com-1ecc6299db9ec823/phf_codegen-0.7.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":60},{"krate":0,"index":62}],"decl_id":null,"docs":" A set of builders to generate Rust source for PHF data structures at\n compile time.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2348,"byte_end":2351,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":" A builder for the `phf::Map` type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2519,"byte_end":2522,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<K>>::new","value":"fn () -> Map<K>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `phf::Map` builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3246,"byte_end":3254,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"phf_path","qualname":"<Map<K>>::phf_path","value":"fn (&mut self, path: &str) -> &mut Map<K>","parent":null,"children":[],"decl_id":null,"docs":" Set the path to the `phf` crate from the global namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3488,"byte_end":3493,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"entry","qualname":"<Map<K>>::entry","value":"fn (&mut self, key: K, value: &str) -> &mut Map<K>","parent":null,"children":[],"decl_id":null,"docs":" Adds an entry to the builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3808,"byte_end":3813,"line_start":140,"line_end":140,"column_start":12,"column_end":17},"name":"build","qualname":"<Map<K>>::build","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `phf::Map`, outputting Rust source to the provided writer.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4858,"byte_end":4861,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"Set","qualname":"::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":33}],"decl_id":null,"docs":" A builder for the `phf::Set` type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4988,"byte_end":4991,"line_start":187,"line_end":187,"column_start":12,"column_end":15},"name":"new","qualname":"<Set<T>>::new","value":"fn () -> Set<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `phf::Set` builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5143,"byte_end":5151,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"phf_path","qualname":"<Set<T>>::phf_path","value":"fn (&mut self, path: &str) -> &mut Set<T>","parent":null,"children":[],"decl_id":null,"docs":" Set the path to the `phf` crate from the global namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5294,"byte_end":5299,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"entry","qualname":"<Set<T>>::entry","value":"fn (&mut self, entry: T) -> &mut Set<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an entry to the builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5570,"byte_end":5575,"line_start":210,"line_end":210,"column_start":12,"column_end":17},"name":"build","qualname":"<Set<T>>::build","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `phf::Set`, outputting Rust source to the provided writer.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5808,"byte_end":5818,"line_start":218,"line_end":218,"column_start":12,"column_end":22},"name":"OrderedMap","qualname":"::OrderedMap","value":"OrderedMap {  }","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45}],"decl_id":null,"docs":" A builder for the `phf::OrderedMap` type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6003,"byte_end":6006,"line_start":226,"line_end":226,"column_start":12,"column_end":15},"name":"new","qualname":"<OrderedMap<K>>::new","value":"fn () -> OrderedMap<K>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a enw `phf::OrderedMap` builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6238,"byte_end":6246,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"phf_path","qualname":"<OrderedMap<K>>::phf_path","value":"fn (&mut self, path: &str) -> &mut OrderedMap<K>","parent":null,"children":[],"decl_id":null,"docs":" Set the path to the `phf` crate from the global namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6487,"byte_end":6492,"line_start":243,"line_end":243,"column_start":12,"column_end":17},"name":"entry","qualname":"<OrderedMap<K>>::entry","value":"fn (&mut self, key: K, value: &str) -> &mut OrderedMap<K>","parent":null,"children":[],"decl_id":null,"docs":" Adds an entry to the builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6829,"byte_end":6834,"line_start":255,"line_end":255,"column_start":12,"column_end":17},"name":"build","qualname":"<OrderedMap<K>>::build","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `phf::OrderedMap`, outputting Rust source to the provided\n writer.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8147,"byte_end":8157,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"OrderedSet","qualname":"::OrderedSet","value":"OrderedSet {  }","parent":null,"children":[{"krate":0,"index":53}],"decl_id":null,"docs":" A builder for the `phf::OrderedSet` type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8305,"byte_end":8308,"line_start":312,"line_end":312,"column_start":12,"column_end":15},"name":"new","qualname":"<OrderedSet<T>>::new","value":"fn () -> OrderedSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `phf::OrderedSet` builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8481,"byte_end":8489,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"phf_path","qualname":"<OrderedSet<T>>::phf_path","value":"fn (&mut self, path: &str) -> &mut OrderedSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Set the path to the `phf` crate from the global namespace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8639,"byte_end":8644,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"entry","qualname":"<OrderedSet<T>>::entry","value":"fn (&mut self, entry: T) -> &mut OrderedSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an entry to the builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8937,"byte_end":8942,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"build","qualname":"<OrderedSet<T>>::build","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `phf::OrderedSet`, outputting Rust source to the provided\n writer.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2457,"byte_end":2460,"line_start":99,"line_end":99,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4923,"byte_end":4926,"line_start":185,"line_end":185,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5924,"byte_end":5934,"line_start":224,"line_end":224,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8226,"byte_end":8236,"line_start":310,"line_end":310,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2457,"byte_end":2460,"line_start":99,"line_end":99,"column_start":37,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4923,"byte_end":4926,"line_start":185,"line_end":185,"column_start":37,"column_end":40},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5924,"byte_end":5934,"line_start":224,"line_end":224,"column_start":37,"column_end":47},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,102,114,97,110,107,111,119,105,99,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,104,102,95,99,111,100,101,103,101,110,45,48,46,55,46,50,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8226,"byte_end":8236,"line_start":310,"line_end":310,"column_start":37,"column_end":47},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":60},"to":{"krate":4294967295,"index":4294967295}}]}